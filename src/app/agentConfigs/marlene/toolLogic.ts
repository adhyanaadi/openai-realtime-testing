import {
  processUserInputAsync,
  exportContext,
  notifyBenefitConfirmed,
  setCameraVerified
} from '../utils';
import {
  consultarBeneficioAsync,
  simularEmprestimo,
  calcularApresentacaoMarlene
} from '../../loanSimulator/index';

function getSaoPauloHour(): number {
  const formatter = new Intl.DateTimeFormat('pt-BR', {
    hour: '2-digit',
    hour12: false,
    timeZone: 'America/Sao_Paulo'
  });
  return parseInt(formatter.format(new Date()), 10);
}

const toolLogic = {
  handleUserMessage: async (args: { message: string }) => {
    const processResult = await processUserInputAsync(args.message);
    const ctx = exportContext();
    return {
      processedInfo: {
        detectedEntities: processResult.entities,
        recommendedState: processResult.recommendedState,
        currentState: ctx.currentState
      }
    };
  },
  open_camera: () => {
    console.log(`[toolLogic] Abrindo c√¢mera para verifica√ß√£o`);
    setCameraVerified(false);
    return { cameraOpened: true };
  },
  close_camera: () => {
    console.log(`[toolLogic] Fechando c√¢mera`);
    return { cameraClosed: true };
  },
  animate_loan_value: (args: { amount: string }) => {
    console.log(`[toolLogic] Animando valor: ${args.amount}`);
    return { highlightedAmount: args.amount };
  },
  time_greeting: () => {
    const hour = getSaoPauloHour();
    let greeting = 'Boa noite';
    if (hour >= 6 && hour < 12) {
      greeting = 'Bom dia';
    } else if (hour >= 12 && hour < 18) {
      greeting = 'Boa tarde';
    }
    console.log(`[toolLogic] Sauda√ß√£o gerada: ${greeting}`);
    return { greeting };
  },
  say_time_greeting: () => {
    const hour = getSaoPauloHour();
    let greeting = 'Boa noite';
    if (hour >= 6 && hour < 12) {
      greeting = 'Bom dia';
    } else if (hour >= 12 && hour < 18) {
      greeting = 'Boa tarde';
    }
    console.log(`[toolLogic] Sauda√ß√£o falada: ${greeting}`);
    return { greeting };
  },
  verify_understanding: (args: {
    loanAmount: string;
    installmentValue: string;
    term: number;
    benefitImpactPercentage: number;
  }) => {
    console.log(
      `[toolLogic] Verificando entendimento do cliente sobre os termos do empr√©stimo`
    );
    const riskAssessment: any = { overallRisk: 'baixo', specificRisks: [] };
    if (args.benefitImpactPercentage > 25) {
      riskAssessment.specificRisks.push({
        type: 'impacto_elevado',
        description:
          'O comprometimento do benef√≠cio est√° acima de 25%, o que pode ser significativo para o sustento mensal',
        recommendation:
          'Oferecer simula√ß√£o com valor menor ou prazo mais longo para reduzir o impacto mensal'
      });
    }
    if (args.term > 60) {
      riskAssessment.specificRisks.push({
        type: 'prazo_longo',
        description:
          'Prazo superior a 60 meses pode ser dif√≠cil de compreender em termos de impacto total',
        recommendation:
          'Enfatizar quanto tempo √© 84 meses em anos (7 anos) para facilitar compreens√£o'
      });
    }
    if (riskAssessment.specificRisks.length > 0) {
      riskAssessment.overallRisk = 'm√©dio';
    }
    if (riskAssessment.specificRisks.length > 2) {
      riskAssessment.overallRisk = 'alto';
    }
    return {
      isUnderstandingConfirmed: riskAssessment.overallRisk === 'baixo',
      riskAssessment,
      suggestedExplanations: [
        `Com esse empr√©stimo de ${args.loanAmount}, voc√™ pagaria ${args.installmentValue} por m√™s, durante ${args.term} meses. Isso seria como guardar ${args.installmentValue} todo m√™s para pagar o empr√©stimo.`,
        `Dos seus ${args.benefitImpactPercentage}% do benef√≠cio que vai para o pagamento, ainda sobram ${100 - args.benefitImpactPercentage}% para suas outras despesas.`
      ]
    };
  },
  simplify_financial_explanation: ({ concept, context }: { concept: string; context?: string }) => {
    console.log(`[toolLogic] Simplificando explica√ß√£o: ${concept}, contexto: ${context || 'geral'}`);
    return {
      concept,
      simpleExplanation: `O ${concept} √© como o dinheiro que voc√™ paga todo m√™s, como se fosse uma conta de √°gua ou luz. √â um valor fixo que sai do seu benef√≠cio automaticamente.`,
      analogyExplanation: `Vamos pensar no ${concept} como fatias de um bolo. Se seu benef√≠cio √© o bolo inteiro, a parcela √© s√≥ uma fatia pequena que voc√™ vai tirar todo m√™s para pagar o empr√©stimo. O importante √© que sobre bastante bolo para voc√™.`,
      visualRepresentation:
        concept === 'parcela'
          ? 'üç∞‚úÇÔ∏è'
          : concept === 'prazo'
          ? 'üìÜ‚û°Ô∏èüìÜ'
          : concept === 'juros'
          ? 'üíµ‚ûï'
          : concept === 'margem_consign√°vel'
          ? 'üí∞üîí'
          : 'üíµ',
      adjustedForContext: context ? `No seu caso, como ${context}, isso significa que...` : null
    };
  },
  handle_camera_error: (args: { errorType: string; alternativeMethod?: string }) => {
    console.log(`[toolLogic] Tratando erro de c√¢mera: ${args.errorType}`);
    const errorMessages: any = {
      permission_denied: 'Parece que n√£o consegui permiss√£o para usar a c√¢mera.',
      device_unavailable: 'Parece que a c√¢mera n√£o est√° dispon√≠vel no momento.',
      timeout: 'A verifica√ß√£o est√° demorando mais que o esperado.',
      other: 'Estamos tendo um problema com a verifica√ß√£o.'
    };
    const alternativeOptions: any = {
      try_again: {
        steps: ['Vamos tentar mais uma vez. √Äs vezes √© s√≥ tocar de novo no bot√£o da c√¢mera.'],
        userGuidance: 'Toque novamente no bot√£o da c√¢mera quando aparecer.'
      },
      phone_verification: {
        steps: ['Vamos verificar por mensagem de texto', 'Enviarei um c√≥digo para seu celular', 'Voc√™ me informa o c√≥digo para confirmar sua identidade'],
        userGuidance: 'Em instantes, voc√™ vai receber uma mensagem com um c√≥digo de 5 n√∫meros no seu celular. Quando receber, me diga quais s√£o os n√∫meros.'
      },
      in_person_verification: {
        steps: ['Faremos a verifica√ß√£o aqui mesmo com seus documentos', 'Preciso ver seu documento com foto'],
        userGuidance: 'Poderia me mostrar seu documento com foto? √â s√≥ um minutinho para confirmar.'
      }
    };
    const alternativeMethod = args.alternativeMethod || 'phone_verification';
    return {
      errorMessage: errorMessages[args.errorType] || errorMessages.other,
      reassuranceMessage: 'N√£o se preocupe, temos um jeito mais f√°cil de fazer essa verifica√ß√£o.',
      alternativeMethod: alternativeOptions[alternativeMethod],
      verificationCode: alternativeMethod === 'phone_verification' ? '12345' : null
    };
  },
  include_companion: (args: { hasCompanion: boolean; relationshipType?: string }) => {
    console.log(`[toolLogic] Ajustando para acompanhante: ${args.hasCompanion}, tipo: ${args.relationshipType || 'n√£o especificado'}`);
    if (!args.hasCompanion) {
      return {
        adjustedApproach: 'comunica√ß√£o_direta',
        suggestions: [
          'Use linguagem ainda mais simples e visual',
          'Ofere√ßa ajuda frequentemente para intera√ß√µes digitais',
          'Verifique compreens√£o com mais frequ√™ncia'
        ]
      };
    }
    const strategies: any = {
      'filho(a)': {
        role: 'mediador_principal',
        approach: 'Inclua nas explica√ß√µes, mas mantenha as decis√µes com o benefici√°rio',
        suggestedPrompts: [
          'Seu/Sua filho(a) est√° acompanhando, ent√£o vou explicar para voc√™s dois',
          'Pode pedir ajuda dele(a) para a parte da c√¢mera'
        ]
      },
      'c√¥njuge': {
        role: 'parceiro_decis√£o',
        approach: 'Trate como decis√£o conjunta, direcione-se a ambos igualmente',
        suggestedPrompts: ['Voc√™s est√£o de acordo com esses valores?', 'Preferem uma parcela menor?']
      },
      'neto(a)': {
        role: 'suporte_tecnol√≥gico',
        approach: 'Utilize para aux√≠lio tecnol√≥gico, mas direcione decis√µes ao idoso',
        suggestedPrompts: ['Seu/Sua neto(a) pode ajudar com a c√¢mera, mas quero confirmar se est√° de acordo']
      },
      default: {
        role: 'auxiliar',
        approach: 'Reconhe√ßa presen√ßa, mas foque comunica√ß√£o no benefici√°rio',
        suggestedPrompts: ['Que bom que veio com algu√©m, isso ajuda', 'Vou explicar para voc√™, e se tiver d√∫vida, podem perguntar tamb√©m']
      }
    };
    return {
      adjustedApproach: 'acompanhante_incluido',
      companionStrategy: strategies[args.relationshipType] || strategies.default,
      verificationRecommendation: 'Ainda assim, verifique consentimento direto do benefici√°rio'
    };
  },
  create_accessible_documentation: (args: { customerName: string; loanDetails: any; deliveryMethod: string }) => {
    console.log(`[toolLogic] Criando documenta√ß√£o acess√≠vel para ${args.customerName}`);
    const deliveryOptions: any = {
      whatsapp_audio: {
        format: '√°udio',
        benefits: ['N√£o depende de leitura', 'Pode ser ouvido v√°rias vezes', 'Familiar para o cliente'],
        exampleScript: `Ol√°, ${args.customerName}! Aqui √© a Marlene da Credmais. Estou enviando a confirma√ß√£o do seu empr√©stimo de ${args.loanDetails.loanAmount}. Vai ser descontado ${args.loanDetails.installmentValue} por m√™s do seu benef√≠cio, durante ${args.loanDetails.term} meses. O dinheiro estar√° na sua conta em at√© 2 dias √∫teis. Qualquer d√∫vida, pode me ligar no n√∫mero da Credmais. Obrigada pela confian√ßa!`
      },
      sms: {
        format: 'texto simples',
        benefits: ['Fica registrado no celular', 'Pode ser mostrado para familiares'],
        exampleText: `Credmais: ${args.customerName}, emprestimo ${args.loanDetails.loanAmount} aprovado. Parcela ${args.loanDetails.installmentValue} x ${args.loanDetails.term}. Dinheiro em 2 dias. Duvidas? Ligue (XX) XXXX-XXXX`
      },
      print_visual: {
        format: 'documento visual',
        benefits: ['Cont√©m √≠cones para f√°cil compreens√£o', 'Cores destacam informa√ß√µes importantes'],
        visualElements: ['üè¶ - Credmais Consignado', 'üíµ - Valor do empr√©stimo', 'üìÖ - Dura√ß√£o do contrato', 'üí∞ - Valor da parcela', 'üì± - Contato para d√∫vidas']
      }
    };
    return {
      documentationCreated: true,
      deliveryMethod: args.deliveryMethod,
      documentDetails: deliveryOptions[args.deliveryMethod],
      retentionSuggestions: [
        'Pe√ßa para o cliente salvar o n√∫mero da Credmais no celular',
        'Sugira que compartilhe as informa√ß√µes com um familiar de confian√ßa',
        'Lembre que pode vir √† loja a qualquer momento para tirar d√∫vidas'
      ]
    };
  },
  verifyCustomerInfo: async ({ customerName, benefitNumber }: { customerName?: string; benefitNumber: string }) => {
    console.log(`[toolLogic] Consultando benef√≠cio: ${benefitNumber || 'n√£o fornecido'}`);
    const info = await consultarBeneficioAsync(benefitNumber, customerName || 'Cliente');
    const fullName = customerName || info.beneficiario.nome;
    const benefitType = info.beneficiario.tipoBeneficio;
    const availableLimit = `R$ ${info.credito.valorMaximoAprovado.toLocaleString('pt-BR')}`;
    const benefitValue = info.beneficio.valor;
    const marginValue = info.beneficio.margemDisponivel;
    const marginPercent = parseFloat(((marginValue / info.beneficio.valor) * 100).toFixed(2));
    return {
      isVerified: true,
      customerInfo: { fullName, benefitType, availableLimit, benefitValue, marginPercent, marginValue }
    };
  },
  consult_benefit: async ({ benefitNumber, customerName }: { benefitNumber: string; customerName?: string }) => {
    const info = await consultarBeneficioAsync(benefitNumber, customerName || 'Cliente');
    const ctx = exportContext();
    if (!ctx.cameraVerified) {
      notifyBenefitConfirmed();
    }
    const fullName = customerName || info.beneficiario.nome;
    const benefitType = info.beneficiario.tipoBeneficio;
    const availableLimit = `R$ ${info.credito.valorMaximoAprovado.toLocaleString('pt-BR')}`;
    const benefitValue = info.beneficio.valor;
    const marginValue = info.beneficio.margemDisponivel;
    const marginPercent = parseFloat(((marginValue / info.beneficio.valor) * 100).toFixed(2));
    return { fullName, benefitType, availableLimit, benefitValue, marginPercent, marginValue };
  },
  simulateLoan: ({ desiredAmount, benefitNumber, customerName, term = 60 }: { desiredAmount: number; benefitNumber?: string; customerName?: string; term?: number }) => {
    console.log(`[toolLogic] Simulando empr√©stimo pelo m√≥dulo loanSimulator: ${desiredAmount}`);
    const amount = desiredAmount || 10000;
    const name = customerName || 'Cliente';
    const num = benefitNumber || '00000000000';
    const result = simularEmprestimo(num, name, amount, term);
    const presentation = calcularApresentacaoMarlene(name, name, num, amount, term);
    return {
      loanAmount: `R$ ${amount.toLocaleString('pt-BR')}`,
      installments: result.prazo,
      monthlyPayment: `R$ ${result.parcela.toLocaleString('pt-BR')}`,
      totalPayable: `R$ ${result.total.toLocaleString('pt-BR')}`,
      impactOnBenefit: `${((result.parcela / result.perfil.beneficio.valor) * 100).toFixed(2)}%`,
      remainingBenefit: `R$ ${(result.perfil.beneficio.valor - result.parcela).toLocaleString('pt-BR')}`,
      simplifiedExplanation: presentation.opcoes[0].texto
    };
  },
  processCameraEvent: (args: { eventType: string }) => {
    console.log(`[toolLogic] Processando evento de c√¢mera: ${args.eventType}`);
    if (args.eventType === 'VERIFICATION_CONFIRMED') {
      setCameraVerified(true);
      return { success: true, message: 'Verifica√ß√£o confirmada', nextStep: 'loan_simulation' };
    }
    if (args.eventType === 'VERIFICATION_FAILED') {
      return { success: false, message: 'Verifica√ß√£o falhou', nextStep: 'retry' };
    }
    if (args.eventType === 'VERIFICATION_CANCELLED') {
      return { success: false, message: 'Verifica√ß√£o cancelada', nextStep: 'early_exit' };
    }
    if (args.eventType === 'CAMERA_CLOSING') {
      return { success: true, message: 'Fechando c√¢mera' };
    }
    return { success: true, message: `Evento de c√¢mera ${args.eventType} processado` };
  }
};

export default toolLogic;
